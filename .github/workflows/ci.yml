name: CI checks

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    # This condition ensures that this job will not run on pull requests in draft state
    if: github.event_name != 'pull_request' || !github.event.pull_request.draft
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout
      - name: Fetch path to MASP parameters
        working-directory: ./masp_proofs
        shell: bash
        run: echo "MASP_PARAMS=$(cargo run --release --example get-params-path --features directories)" >> $GITHUB_ENV
      - name: Cache MASP parameters
        id: cache-params
        uses: actions/cache@v3.3.2
        with:
          path: ${{ env.MASP_PARAMS }}
          key: ${{ runner.os }}-params
      - name: Fetch MASP parameters
        if: steps.cache-params.outputs.cache-hit != 'true'
        working-directory: ./masp_proofs
        run: cargo run --release --example download-params --features download-params

      - name: Run tests
        run: cargo test  --all-features --verbose --release --all
      - name: Run slow tests
        run: cargo test --all-features --verbose --release --all -- --ignored
  build:
    name: Build target ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - wasm32-unknown-unknown
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      - run: cargo fetch
      - name: Build masp_proofs for target
        working-directory: ./masp_proofs
        run: cargo build --verbose --no-default-features --target ${{ matrix.target }} --features js


  bitrot:
    name: Bitrot check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Build benchmarks to prevent bitrot
      - name: Build benchmarks
        run: cargo build --all --benches

  clippy:
    name: Lint #Clippy (MSRV)
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          name: Clippy (MSRV)
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -D warnings

  clippy-beta:
    name: Nightly lint # Clippy (beta)
    timeout-minutes: 30
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@beta
        id: toolchain
      - run: rustup override set ${{steps.toolchain.outputs.name}}
      - name: Run Clippy (beta)
        uses: actions-rs/clippy-check@v1
        continue-on-error: true
        with:
          name: Clippy (beta)
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -W clippy::all

  doc-links:
    name: Intra-doc links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cargo fetch
      # Requires #![deny(rustdoc::broken_intra_doc_links)] in crates.
      - name: Check intra-doc links
        run: cargo doc --all --document-private-items

  fmt:
    name: Rustfmt
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Check formatting
        run: cargo fmt --all -- --check

  security:
    name: Security - Cargo Audit
    runs-on: ubuntu-latest
    container:
      image: rustlang/rust:nightly
    steps:
    - uses: actions/checkout@v3
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Cargo Audit
      run: cargo audit
